# Generated by Django 3.1 on 2020-09-12 15:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pyBreak', '0014_datapybreak_rankingpybreak'),
    ]

    operations = [
        migrations.CreateModel(
            name='PlayersSummary',
            fields=[
                ('id', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('Matches_won', models.IntegerField(default=0)),
                ('Matches_lost', models.IntegerField(default=0)),
                ('Matches_played', models.IntegerField(default=0)),
                ('Rival_rank', models.FloatField(blank=True, null=True)),
                ('Matches_won_perc', models.FloatField(blank=True, null=True)),
                ('Aces_AVG', models.FloatField(blank=True, null=True)),
                ('DoubleFaults_AVG', models.FloatField(blank=True, null=True)),
                ('First_serve_accuracy', models.FloatField(blank=True, null=True)),
                ('First_serve_points', models.FloatField(blank=True, null=True)),
                ('Second_serve_points', models.FloatField(blank=True, null=True)),
                ('Total_serve_points_won', models.FloatField(blank=True, null=True)),
                ('Breakpoints_to_defend_per_set', models.FloatField(blank=True, null=True)),
                ('Breakpoints_saved_ratio', models.FloatField(blank=True, null=True)),
                ('Return_1st_serve_points', models.FloatField(blank=True, null=True)),
                ('Return_2nd_serve_points', models.FloatField(blank=True, null=True)),
                ('Total_return_points', models.FloatField(blank=True, null=True)),
                ('Breakpoints_created_per_set', models.FloatField(blank=True, null=True)),
                ('Breakpoints_converted_ratio', models.FloatField(blank=True, null=True)),
                ('Total_points', models.FloatField(blank=True, null=True)),
                ('Service_games_won_ratio', models.FloatField(blank=True, null=True)),
                ('Return_games_won_ratio', models.FloatField(blank=True, null=True)),
                ('Total_games_ratio', models.FloatField(blank=True, null=True)),
                ('Sets_played', models.IntegerField(default=0)),
                ('Tiebreak_played', models.IntegerField(default=0)),
                ('Tiebreak_won', models.IntegerField(default=0)),
                ('Sets_ended_by_tiebreak', models.FloatField(blank=True, null=True)),
                ('Tiebreak_won_perc', models.FloatField(blank=True, null=True)),
                ('Surety_played', models.IntegerField(default=0)),
                ('Surety_won', models.IntegerField(default=0)),
                ('Favorite_played', models.IntegerField(default=0)),
                ('Favorite_won', models.IntegerField(default=0)),
                ('Slightfav_played', models.IntegerField(default=0)),
                ('Slightfav_won', models.IntegerField(default=0)),
                ('Underdog_played', models.IntegerField(default=0)),
                ('Underdog_won', models.IntegerField(default=0)),
                ('Under_played', models.IntegerField(default=0)),
                ('Under_won', models.IntegerField(default=0)),
                ('Slightunder_played', models.IntegerField(default=0)),
                ('Slightunder_won', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'players_summary',
                'managed': False,
            },
        ),
    ]
